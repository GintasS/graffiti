{
  "swagger": "2.0",
  "info": {
    "description": "This is a GraffLib API that exposes various endpoints for client app.",
    "version": "1.0.0",
    "title": "GraffLib REST API"
  },

  "basePath": "/v1",
  "tags": [
    {
      "name": "Users",
      "description": "Manage user data."
    },
    {
      "name": "Admins",
      "description": "Perform administrator duties."
    },
    {
      "name": "Markers",
      "description": "Manage GIS markers."
    },
    {
      "name": "Marker Images",
      "description": "Manage images for GIS markers."
    },
    {
      "name": "City markers",
      "description": "Manage markers for a particular city."
    },
    {
      "name": "Cities",
      "description": "Manage cities."
    }

  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Get all users.",
        "description": "",
        "operationId": "getAllUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user.",
        "description": "",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "409": {
            "description": "User already exists."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/users/password-recovery": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Send a password recovery email.",
        "description": "",
        "operationId": "sendPasswordRecoveryEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Email object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendUserPasswordRecoveryRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted operation."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "User was not found."
          },
          "409": {
            "description": "User does not support this operation."
          },
          "500": {
            "description": "Internal server error."
          }

        }
      }
    },
    "/users/password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's password after sending recovery email.",
        "description": "",
        "operationId": "updateUserPasswordAfterRecoveryEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Password reset object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordRecoveryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User will be redirected to html template with success message."
          },
          "400": {
            "description": "User will be redirected to html template with failure message."
          },
          "404": {
            "description": "User will be redirected to html template with failure message."
          },
          "405": {
            "description": "User will be redirected to html template with failure message."
          },
          "409": {
            "description": "User will be redirected to html template with failure message."
          },
          "500": {
            "description": "User will be redirected to html template with failure message."
          }
        }
      },

      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's password when user is authenticated.",
        "description": "",
        "operationId": "updateUserPasswordUserAuthenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Password reset object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordUserAuthenticatedRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "409": {
            "description": "There are problems with old/new password."
          },
          "422": {
            "description": "User can't update other user passwords, only his/her owns."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/users/{id}/": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Get a user by UserId.",
        "description": "",
        "operationId": "getUserFromId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "tags": [
          "Admins"
        ],
        "summary": "Delete a specific user.",
        "description": "",
        "operationId": "deleteUserFromId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "409": {
            "description": "User of type Administrator can't be deleted."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/markers": {
      "get": {
        "tags": [
          "Markers"
        ],
        "summary": "Get all markers.",
        "description": "",
        "operationId": "getAllMarkers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarkerModel"
              }
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "409": {
            "description": "User can't get all the markers."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Markers"
        ],
        "summary": "Create a new marker.",
        "description": "",
        "operationId": "createMarker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Marker object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMarkerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/CreateMarkerResponse"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "409": {
            "description": "Marker can't be created."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/markers/{id}/status/marker-status": {
      "patch": {
        "tags": [
          "Markers"
        ],
        "summary": "Patch a marker status.",
        "description": "",
        "operationId": "patchMarkerStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Marker ID.",
            "required": true,
            "type": "string"
          },

          {
            "in": "body",
            "name": "body",
            "description": "Marker status object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMarkerStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },


    "/markers/{id}/": {
      "delete": {
        "tags": [
          "Markers"
        ],
        "summary": "Delete a marker.",
        "description": "",
        "operationId": "deleteMarker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Marker ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "Marker was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },


    "/markers/{id}/images": {
      "get": {
        "tags": [
          "Marker Images"
        ],
        "summary": "Get all images for the marker.",
        "description": "",
        "operationId": "getMarkerImages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Marker ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageModel"
              }
            }
          },
          "404": {
            "description": "Marker was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Marker Images"
        ],
        "summary": "Create a new image for the marker.",
        "description": "",
        "operationId": "createImageForMarker",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Marker ID.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "user_id",
            "description": "User ID to assign the image to.",
            "required": true,
            "default": 1,
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "image-classification-model",
            "description": "Classification data provided by the user.",
            "required": true,
            "default": "{\"user_provided_name\":\"test\", \"description\":\"test\", \"graffiti_object\":\"test\", \"image_direction\":\"FRONT\"}",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "image-precise-location-model",
            "description": "Optional. Precise image location from the pointer.",
            "required": false,
            "default": "{\"coordinates\": [\"0\", \"0\"]}",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "inFile",
            "description": "Image file to be uploaded.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/CreateImageResponse"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "405": {
            "description": "Validation exception."
          },
          "409": {
            "description": "Image already exists."
          },
          "413": {
            "description": "Image's size is too large. Maximum size is 100 MB."
          },
          "415": {
            "description": "Image's extension type is not supported."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/images/{id}/status/graffiti-status": {
      "patch": {
        "tags": [
          "Marker Images"
        ],
        "summary": "Patch graffiti image status.",
        "description": "",
        "operationId": "patchImageGraffitiStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Image ID.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Graffiti status object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchImageGraffitiStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "Marker/image was not found."
          },
          "409": {
            "description": "User can't update status of the image that she/he didn't upload."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/images/{id}/": {
      "delete": {
        "tags": [
          "Marker Images"
        ],
        "summary": "Delete image.",
        "description": "",
        "operationId": "deleteSpecificImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Image ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User or the image was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },



    "/cities/{id}/markers": {
      "get": {
        "tags": [
          "City markers"
        ],
        "summary": "Get all markers for the city.",
        "description": "",
        "operationId": "getCityMarkers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarkerModel"
              }
            }
          },
          "404": {
            "description": "City was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/cities": {
      "get": {
        "tags": [
          "Cities"
        ],
        "summary": "Get all cities.",
        "description": "",
        "operationId": "getAllCities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/City"
              }
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Cities"
        ],
        "summary": "Create a new city.",
        "description": "",
        "operationId": "createCity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "City object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCityRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/City"
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "409": {
            "description": "City already exists."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/cities/{id}/": {
      "delete": {
        "tags": [
          "Cities"
        ],
        "summary": "Delete a city.",
        "description": "",
        "operationId": "deleteCity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "City ID",
            "required": true,
            "type": "integer"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/City"
              }
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "City was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }


  },
  "definitions": {



    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "user privillege status",
          "enum": [
            "user",
            "admin"
          ]
        }
      }
    },

    "CreateUserRequest": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "description": "user privillege status",
          "enum": [
            "user",
            "admin"
          ]
        }
      }
    },

    "CreateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },

    "SendUserPasswordRecoveryRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },

    "UpdateUserPasswordRecoveryRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },

    "UpdateUserPasswordUserAuthenticatedRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "old_password": {
          "type": "string"
        },
        "new_password": {
          "type": "string"
        }
      }
    },

    "ImageModel": {
      "type": "object",
      "properties": {
        "photo_url": {
          "type": "string"
        },
        "marker_id": {
          "type": "string"
        },
        "image_metadata_model": {
          "$ref": "#/definitions/ImageMetadataModel"
        },
        "image_classification_model": {
          "$ref": "#/definitions/ImageClassificationModel"
        }
      }
    },


    "CreateImageResponse": {
      "type": "object",
      "properties": {
        "image_unique_name": {
          "type": "string"
        },
        "image_metadata_model": {
          "$ref": "#/definitions/ImageMetadataModel"
        },
        "image_classification_model": {
          "$ref": "#/definitions/ImageClassificationModel"
        }
      }
    },

    "ImageMetadataModel": {
      "type": "object",
      "properties": {
        "extension": {
          "type": "string",
          "description": "Image's extension",
          "enum": [
            "png",
            "jpeg"
          ]
        },
        "photographed_time": {
          "type": "string"
        },
        "upload_time": {
          "type": "string"
        },

        "image_location_model": {
          "$ref": "#/definitions/ImageLocationModel"
        }
      }
    },

    "ImageLocationModel": {
      "properties": {
        "coordinates": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "type": "string"
          }
        }
      }
    },

    "ImageClassificationModel": {
      "type": "object",
      "properties": {
        "user_provided_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "graffiti_object": {
          "type": "string"
        },
        "image_direction": {
          "type": "string",
          "description": "Direction from which the photo was taken.",
          "enum": [
            "front",
            "angle"
          ]
        }
      }
    },


    "MarkerModel": {
      "type": "object",
      "properties": {
        "marker_id": {
          "type": "string"
        },
        "marker_status": {
          "type": "string",
          "description": "Status of the marker.",
          "enum": [
            "ENABLED",
            "DISABLED"
          ]
        },
        "marker_metadata_model": {
          "$ref": "#/definitions/MarkerMetadataModel"
        }
      }
    },

    "MarkerMetadataModel": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "last_update": {
          "type": "string"
        },
        "marker_location_model": {
          "$ref": "#/definitions/MarkerLocationModel"
        }
      }
    },

    "MarkerLocationModel": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "coordinates": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "type": "string"
          }
        }
      }
    },

    "CreateMarkerRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer"
        },
        "coordinates": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "type": "string"
          },
          "example": [ "54.68712960271797", "25.305118560791016" ]
        }
      }
    },

    "CreateMarkerResponse": {
      "type": "object",
      "properties": {
        "marker_unique_name": {
          "type": "string"
        }
      }
    },

    "PatchMarkerStatusRequest": {
      "type": "object",
      "properties": {
        "marker_status": {
          "type": "string",
          "description": "Status of the marker.",
          "enum": [
            "ENABLED",
            "DISABLED"
          ]
        }
      }
    },

    "PatchImageGraffitiStatusRequest": {
      "type": "object",
      "properties": {
        "graffiti_status": {
          "type": "string",
          "description": "Status of the graffiti behind the marker.",
          "enum": [
            "ACTIVE",
            "HIDDEN",
            "UNKNOWN"
          ]
        }
      }
    },

    "CreateCityRequest": {
      "type": "object",
      "properties": {
        "city_name": {
          "type": "string"
        }
      }
    },

    "City": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "city_name": {
          "type": "string"
        }
      }
    }

  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}