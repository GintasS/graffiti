{
  "swagger": "2.0",
  "info": {
    "description": "This is a GraffLib server that exposes various endpoints for client app.",
    "version": "1.0.0",
    "title": "GraffLib REST API"
  },
  "host": "localhost:8000",
  "basePath": "/v1",
  "tags": [
    {
      "name": "Users",
      "description": "Endpoints for dealing directly with user account data.",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "Admins",
      "description": "Endpoints for managing user data.",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "Images",
      "description": "Endpoints for dealing directly with graffiti images.",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "Markers",
      "description": "Endpoints for dealing directly with GIS markers.",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "Cities",
      "description": "Endpoints for dealing with cities.",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }

  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user.",
        "description": "",
        "operationId": "postUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "405": {
            "description": "Validation exception."
          },
          "409": {
            "description": "User already exists."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/users/password-recovery": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Send a password recovery email.",
        "description": "",
        "operationId": "sendPasswordRecoveryEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendUserPasswordRecoveryRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted operation."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "User was not found."
          },
          "405": {
            "description": "Validation exception."
          },
          "500": {
            "description": "Internal server error."
          }

        }
      }
    },
    "/users/password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's password after sending recovery email.",
        "description": "",
        "operationId": "updateUserPasswordAfterRecoveryEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordRecoveryRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Bad request."
          },
          "405": {
            "description": "Validation exception."
          },
          "409": {
            "description": "User didn't request password change."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },

      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's password when user is authenticated.",
        "description": "",
        "operationId": "updateUserPasswordUserAuthenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordUserAuthenticatedRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "405": {
            "description": "Validation exception."
          },
          "422": {
            "description": "User can't update other user passwords, only his/her owns."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/admins/users": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Get all users.",
        "description": "",
        "operationId": "getAllUsersByAdmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/users/{userId}": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Get a user by UserId.",
        "description": "",
        "operationId": "getUserByIdByAdmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to return.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "tags": [
          "Admins"
        ],
        "summary": "Delete a specific user.",
        "description": "",
        "operationId": "deleteUserByAdmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to delete.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/users/{userId}/images/{imageId}": {
      "delete": {
        "tags": [
          "Admins"
        ],
        "summary": "Delete user's image.",
        "description": "",
        "operationId": "deleteUserSpecificImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to delete a specific image for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "ID of Image to delete.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User or the image was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/users/{userId}/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get user's images.",
        "description": "",
        "operationId": "getUserImages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to get all the images.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Create a new image for the user.",
        "description": "",
        "operationId": "postUserImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to create a new image for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Image object that needs to be added to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateImageRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/CreateImageResponse"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "User was not found."
          },
          "405": {
            "description": "Validation exception."
          },
          "409": {
            "description": "Image already exists."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/{cityName}/markers": {
      "get": {
        "tags": [
          "Markers"
        ],
        "summary": "Get all markers for the city.",
        "description": "",
        "operationId": "getCityMarkers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityName",
            "in": "path",
            "description": "Name of the city to get all markers for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Marker"
              }
            }
          },
          "404": {
            "description": "City was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },

      "post": {
        "tags": [
          "Markers"
        ],
        "summary": "Create a new marker for the city.",
        "description": "",
        "operationId": "postCityMarker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityName",
            "in": "path",
            "description": "Name of the city to create a new marker for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/Marker"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "City was not found."
          },
          "405": {
            "description": "Validation exception."
          },
          "409": {
            "description": "Marker already exists."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/markers/{markerId}/images": {
      "get": {
        "tags": [
          "Markers"
        ],
        "summary": "Get all images for the marker.",
        "description": "",
        "operationId": "getImagesForMarker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "markerId",
            "in": "path",
            "description": "ID of Marker to get all the images for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/GetCityMarkerImagesResponse"
            }
          },
          "404": {
            "description": "Marker was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Markers"
        ],
        "summary": "Create a new image for the marker.",
        "description": "",
        "operationId": "postImageForMarker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "markerId",
            "in": "path",
            "description": "ID of Marker to create a new image for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/CreateCityMarkerImageResponse"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "404": {
            "description": "Marker was not found."
          },
          "405": {
            "description": "Validation exception."
          },
          "409": {
            "description": "Image already exists."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/cities": {
      "get": {
        "tags": [
          "Cities"
        ],
        "summary": "Get all cities.",
        "description": "",
        "operationId": "getAllCities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Cities"
        ],
        "summary": "Create a new city.",
        "description": "",
        "operationId": "postCity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "City object that needs to be added to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCityRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/CreateCityResponse"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "403": {
            "description": "User is not authorized."
          },
          "405": {
            "description": "Validation exception."
          },
          "409": {
            "description": "City already exists"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "user privillege status",
          "enum": [
            "user",
            "admin"
          ]
        }
      }
    },

    "CreateUserRequest": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "description": "user privillege status",
          "enum": [
            "user",
            "admin"
          ]
        }
      }
    },

    "CreateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },

    "SendUserPasswordRecoveryRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },

    "UpdateUserPasswordRecoveryRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },

    "UpdateUserPasswordUserAuthenticatedRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },







    "Image": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "imageMetadata": {
          "$ref": "#/definitions/ImageMetadata"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "imageDescription": {
          "$ref": "#/definitions/ImageDescription"
        }
      }
    },

    "ImageModel": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "imageMetadata": {
          "$ref": "#/definitions/ImageMetadata"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "imageDescription": {
          "$ref": "#/definitions/ImageDescription"
        }
      }
    },


    "CreateImageRequest": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "imageMetadataModel": {
          "$ref": "#/definitions/ImageMetadataModel"
        },
        "imageDescription": {
          "$ref": "#/definitions/ImageDescriptionModel"
        }
      }
    },

    "CreateImageResponse": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "imageMetadataModel": {
          "$ref": "#/definitions/ImageMetadataModel"
        },
        "imageDescription": {
          "$ref": "#/definitions/ImageDescriptionModel"
        }
      }
    },


    "ImageMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userPhotoId": {
          "type": "integer",
          "format": "int64"
        },
        "extension": {
          "type": "string",
          "description": "Image's extension",
          "enum": [
            "png",
            "jpeg",
            "jpg"
          ]
        },
        "Latitude": {
          "type": "number",
          "format": "double"
        },
        "Longitude": {
          "type": "number",
          "format": "double"
        },
        "photographyTime": {
          "type": "string"
        },
        "uploadTime": {
          "type": "string"
        }
      }
    },

    "ImageMetadataModel": {
      "type": "object",
      "properties": {
        "extension": {
          "type": "string",
          "description": "Image's extension",
          "enum": [
            "png",
            "jpeg",
            "jpg"
          ]
        },

        "coordinates": {
          "$ref": "#/definitions/CoordinatesModel"
        },


        "photographyTime": {
          "type": "string"
        },
        "uploadTime": {
          "type": "string"
        }
      }
    },

    "Coordinates": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "Latitude": {
          "type": "number",
          "format": "double"
        },
        "Longitude": {
          "type": "number",
          "format": "double"
        }
      }
    },

    "CoordinatesModel": {
      "properties": {
        "Latitude": {
          "type": "number",
          "format": "double"
        },
        "Longitude": {
          "type": "number",
          "format": "double"
        }
      }
    },


    "ImageDescription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userPhotoId": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "graffitiObject": {
          "type": "string"
        },
        "photoDirection": {
          "type": "string",
          "description": "Direction from which the photo was taken.",
          "enum": [
            "front",
            "angle"
          ]
        }
      }
    },


    "ImageDescriptionModel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "graffitiObject": {
          "type": "string"
        },
        "photoDirection": {
          "type": "string",
          "description": "Direction from which the photo was taken.",
          "enum": [
            "front",
            "angle"
          ]
        }
      }
    },

    "Marker": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },

        "statistics": {
          "$ref": "#/definitions/MarkerStatistics"
        },

        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      }
    },

    "MarkerModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },

        "statistics": {
          "$ref": "#/definitions/MarkerStatisticsModel"
        },

        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      }
    },

    "MarkerStatistics": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "numberOfImages": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },

    "MarkerStatisticsModel": {
      "type": "object",
      "properties": {
        "numberOfImages": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },


    "GetCityMarkersResponse": {
      "type": "object",
      "properties": {
        "cityMarkers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        }
      }
    },

    "GetCityMarkerImagesResponse": {
      "type": "object",
      "properties": {
        "markerImages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      }
    },

    "CreateCityMarkerImageRequest": {
      "type": "object",
      "properties": {
        "markerId": {
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "$ref": "#/definitions/ImageModel"
        }
      }
    },

    "CreateCityMarkerImageResponse": {
      "type": "object",
      "properties": {
        "markerId": {
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "$ref": "#/definitions/Image"
        }
      }
    },

    "GetCitiesResponse": {
      "type": "object",
      "properties": {
        "cities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/City"
          }
        }
      }
    },

    "CreateCityRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },

    "CreateCityResponse": {
      "type": "object",
      "properties": {
        "city": {
          "$ref": "#/definitions/City"
        }
      }
    },

    "City": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },



    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}